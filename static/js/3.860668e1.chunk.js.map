{"version":3,"sources":["Components/Pages/BiSamples/biData.tsx","Components/Pages/BiSamples/USACovidDashboard/USACovidDashboard.tsx","Components/Pages/BiSamples/BiSamples.tsx"],"names":["usaDiseases","getUSAMapEchartOption","theme","dataArray","usaCovidData","forEach","row","state","val0","parseFloat","replace","findIndex","el","push","name","value","idx","statePop","usaStates","find","State","Population","max","tooltip","trigger","showDelay","transitionDuration","formatter","params","split","visualMap","left","min","inRange","color","calculable","textStyle","series","type","roam","map","emphasis","label","show","itemStyle","areaColor","textFixed","Alaska","data","getUSALineEchartOption","selectedStates","combined","finalArray","week","Object","keys","key","prettyName","val","population","selectedState","i","animationEasing","animationDuration","toFixed","textColor","options","legend","grid","right","bottom","containLabel","toolbox","feature","saveAsImage","xAxis","nameLocation","nameGap","axisLine","lineStyle","yAxis","dataZoom","animation","renderTooltip","props","Tooltip","id","renderTooltipLineToggle","USACovidDashboard","useState","selectionStates","setSelectionStates","showStates","setShowStates","lineStatesCombined","setLineStatesCombined","useEffect","echarts","registerMap","usa","top","width","height","Hawaii","removeState","states","indexOf","splice","length","addState","pop","sort","onMapEvents","click","event","btnOutline","Row","className","Col","href","style","option","lazyUpdate","onEvents","OverlayTrigger","placement","delay","hide","overlay","Button","variant","marginRight","marginBottom","onClick","filter","element","slxnel","notMerge","BiSamples","selectedDash","setSelectedDash","Container"],"mappings":"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","file":"static/js/3.860668e1.chunk.js","sourcesContent":["export interface CovidData {\r\n    date: string;\r\n    total_cases?: number;\r\n    new_cases?: number;\r\n    new_cases_smoothed?: number;\r\n    total_deaths?: number;\r\n    new_deaths?: number;\r\n    new_deaths_smoothed?: number;\r\n    total_cases_per_million?: number;\r\n    new_cases_per_million?: number;\r\n    new_cases_smoothed_per_million?: number;\r\n    total_deaths_per_million?: number;\r\n    new_deaths_per_million?: number;\r\n    new_deaths_smoothed_per_million?: number;\r\n    icu_patients?: number;\r\n    icu_patients_per_million?: number;\r\n    hosp_patients?: number;\r\n    hosp_patients_per_million?: number;\r\n    weekly_icu_admissions?: number;\r\n    weekly_icu_admissions_per_million?: number;\r\n    weekly_hosp_admissions?: number;\r\n    weekly_hosp_admissions_per_million?: number;\r\n    total_tests?: number;\r\n    new_tests?: number;\r\n    new_tests_smoothed?: number;\r\n    total_tests_per_thousand?: number;\r\n    new_tests_per_thousand?: number;\r\n    new_tests_smoothed_per_thousand?: number;\r\n    tests_per_case?: number;\r\n    positive_rate?: number;\r\n    tests_units?: number;\r\n}\r\n\r\n// export const SelectionOptionsCovid = [\r\n//     \"new_cases\",\r\n//     \"new_cases_smoothed\",\r\n//     \"total_deaths\",\r\n//     \"new_deaths\",\r\n//     \"new_deaths_smoothed\",\r\n//     \"total_cases_per_million\",\r\n//     \"new_cases_per_million\",\r\n//     \"new_cases_smoothed_per_million\",\r\n//     \"total_deaths_per_million\",\r\n//     \"new_deaths_per_million\",\r\n//     \"new_deaths_smoothed_per_million\",\r\n//     \"icu_patients\",\r\n//     \"icu_patients_per_million\",\r\n//     \"hosp_patients\",\r\n//     \"hosp_patients_per_million\",\r\n//     \"weekly_icu_admissions\",\r\n//     \"weekly_icu_admissions_per_million\",\r\n//     \"weekly_hosp_admissions\",\r\n//     \"weekly_hosp_admissions_per_million\",\r\n//     \"total_tests\",\r\n//     \"new_tests\",\r\n//     \"new_tests_smoothed\",\r\n//     \"total_tests_per_thousand\",\r\n//     \"new_tests_per_thousand\",\r\n//     \"new_tests_smoothed_per_thousand\",\r\n//     \"tests_per_case\",\r\n//     \"positive_rate\",\r\n//     \"tests_units\",\r\n// ];\r\n\r\nexport const SelectionOptionsCovid = [\r\n    { name: \"new_cases\", value: \"new_cases\" },\r\n    { name: \"new_cases_smoothed\", value: \"new_cases_smoothed\" },\r\n    { name: \"new_deaths\", value: \"new_deaths\" },\r\n    { name: \"new_deaths_smoothed\", value: \"new_deaths_smoothed\" },\r\n    { name: \"new_cases_per_million\", value: \"new_cases_per_million\" },\r\n    {\r\n        name: \"new_cases_smoothed_per_million\",\r\n        value: \"new_cases_smoothed_per_million\",\r\n    },\r\n    { name: \"new_deaths_per_million\", value: \"new_deaths_per_million\" },\r\n    {\r\n        name: \"new_deaths_smoothed_per_million\",\r\n        value: \"new_deaths_smoothed_per_million\",\r\n    },\r\n    { name: \"icu_patients\", value: \"icu_patients\" },\r\n    { name: \"icu_patients_per_million\", value: \"icu_patients_per_million\" },\r\n    { name: \"hosp_patients\", value: \"hosp_patients\" },\r\n    { name: \"hosp_patients_per_million\", value: \"hosp_patients_per_million\" },\r\n    { name: \"weekly_icu_admissions\", value: \"weekly_icu_admissions\" },\r\n    {\r\n        name: \"weekly_icu_admissions_per_million\",\r\n        value: \"weekly_icu_admissions_per_million\",\r\n    },\r\n    { name: \"weekly_hosp_admissions\", value: \"weekly_hosp_admissions\" },\r\n    {\r\n        name: \"weekly_hosp_admissions_per_million\",\r\n        value: \"weekly_hosp_admissions_per_million\",\r\n    },\r\n    { name: \"new_tests\", value: \"new_tests\" },\r\n    { name: \"new_tests_smoothed\", value: \"new_tests_smoothed\" },\r\n    { name: \"total_tests_per_thousand\", value: \"total_tests_per_thousand\" },\r\n    { name: \"new_tests_per_thousand\", value: \"new_tests_per_thousand\" },\r\n    {\r\n        name: \"new_tests_smoothed_per_thousand\",\r\n        value: \"new_tests_smoothed_per_thousand\",\r\n    },\r\n    { name: \"tests_per_case\", value: \"tests_per_case\" },\r\n    { name: \"positive_rate\", value: \"positive_rate\" },\r\n    { name: \"tests_units\", value: \"tests_units\" },\r\n];\r\n\r\nexport interface CountryData {\r\n    continent?: string;\r\n    location?: string;\r\n    population?: number;\r\n    population_density?: number;\r\n    median_age?: number;\r\n    aged_65_older?: number;\r\n    aged_70_older?: number;\r\n    gdp_per_capita?: number;\r\n    cardiovasc_death_rate?: number;\r\n    diabetes_prevalence?: number;\r\n    handwashing_facilities?: number;\r\n    hospital_beds_per_thousand?: number;\r\n    life_expectancy?: number;\r\n    human_development_index?: number;\r\n    stringency_index?: number;\r\n    extreme_poverty?: number;\r\n    female_smokers?: number;\r\n    male_smokers?: number;\r\n    data?: CovidData[];\r\n}\r\n\r\nexport const usaDiseases = {\r\n    // \"Alzheimer disease (G30)\": 1,\r\n    \"COVID-19 (U071, Multiple Cause of Death)\": \"COVID-19\",\r\n    // \"COVID-19 (U071, Underlying Cause of Death)\": 1,\r\n    // \"Cerebrovascular diseases (I60-I69)\": 1,\r\n    // \"Chronic lower respiratory diseases (J40-J47)\": 1,\r\n    // \"Diabetes mellitus (E10-E14)\": 1,\r\n    // \"Diseases of heart (I00-I09,I11,I13,I20-I51)\": 1,\r\n    // \"Influenza and pneumonia (J09-J18)\": 1,\r\n    // \"Malignant neoplasms (C00-C97)\": 1,\r\n    // \"Natural Cause\": 1,\r\n    // \"Nephritis, nephrotic syndrome and nephrosis (N00-N07,N17-N19,N25-N27)\": 1,\r\n    // \"Other diseases of respiratory system (J00-J06,J30-J39,J67,J70-J98)\": 1,\r\n    // \"Septicemia (A40-A41)\": 1,\r\n    // \"Symptoms, signs and abnormal clinical and laboratory findings, not elsewhere classified (R00-R99)\": 1,\r\n    \"All Cause\": \"All Causes\",\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Row, Col, Button, Tooltip, OverlayTrigger } from \"react-bootstrap\";\r\nimport ReactEcharts from \"echarts-for-react\";\r\nimport echarts from \"echarts\";\r\nimport \"./USACovidDashboard.css\";\r\nimport usaCovidData from \"../weekly-usa-covid.json\";\r\nimport { usaDiseases } from \"../biData\";\r\nimport usa from \"../../../../Images/USA.json\";\r\nimport usaStates from \"../us_state_pops_2019.json\";\r\n\r\nconst getUSAMapEchartOption = (theme: string) => {\r\n    // calculate deaths per 100,000 per state\r\n    // sometimes the value is a number and sometimes a string so have to clean the numbers before adding\r\n    let dataArray: { name: string; value: number }[] = [];\r\n    usaCovidData.forEach((row) => {\r\n        const state = row[\"Jurisdiction of Occurrence\"];\r\n        // multiple value\r\n        let val0 = 0;\r\n        if (\r\n            row[\"COVID-19 (U071, Multiple Cause of Death)\"] &&\r\n            // eslint-disable-next-line eqeqeq\r\n            row[\"MMWR Year\"] == 2020 &&\r\n            typeof row[\"COVID-19 (U071, Multiple Cause of Death)\"] === \"string\"\r\n        ) {\r\n            val0 = parseFloat(\r\n                row[\"COVID-19 (U071, Multiple Cause of Death)\"].replace(\r\n                    /,/g,\r\n                    \"\"\r\n                )\r\n            );\r\n        } else if (\r\n            row[\"COVID-19 (U071, Multiple Cause of Death)\"] &&\r\n            // eslint-disable-next-line eqeqeq\r\n            row[\"MMWR Year\"] == 2020 &&\r\n            typeof row[\"COVID-19 (U071, Multiple Cause of Death)\"] === \"number\"\r\n        ) {\r\n            val0 = row[\"COVID-19 (U071, Multiple Cause of Death)\"];\r\n        }\r\n        if (dataArray.findIndex((el) => state === el[\"name\"]) === -1) {\r\n            dataArray.push({ name: state, value: val0 });\r\n        } else {\r\n            const idx = dataArray.findIndex((el) => state === el[\"name\"]);\r\n            dataArray[idx][\"value\"] += val0;\r\n        }\r\n    });\r\n    // turn raw deaths into per 100,000\r\n    dataArray.forEach((el) => {\r\n        const statePop = usaStates.find((state) => state.State === el.name);\r\n        el.value =\r\n            (el.value / (statePop?.Population ? statePop?.Population : 1)) *\r\n            100000;\r\n    });\r\n    let max = 0;\r\n    dataArray.forEach((el) => {\r\n        if (\r\n            usaStates.find((state) => state.State === el[\"name\"]) &&\r\n            el[\"value\"] > max\r\n        ) {\r\n            max = el[\"value\"];\r\n        }\r\n    });\r\n    return {\r\n        tooltip: {\r\n            trigger: \"item\",\r\n            showDelay: 0,\r\n            transitionDuration: 0.2,\r\n            formatter: function (params) {\r\n                let valueSplit = (params.value + \"\").split(\".\");\r\n                let value = valueSplit[0].replace(\r\n                    /(\\d{1,3})(?=(?:\\d{3})+(?!\\d))/g,\r\n                    \"$1,\"\r\n                );\r\n                return params.name + \": \" + value;\r\n            },\r\n        },\r\n        visualMap: {\r\n            left: \"right\",\r\n            min: 0,\r\n            max: max,\r\n            inRange: {\r\n                color: [\"aqua\", \"darkblue\"],\r\n            },\r\n            calculable: true,\r\n            textStyle: {\r\n                color: theme === \"light\" ? \"black\" : \"white\",\r\n            },\r\n        },\r\n        series: [\r\n            {\r\n                name: \"Total Deaths\",\r\n                type: \"map\",\r\n                roam: true,\r\n                map: \"USA\",\r\n                emphasis: {\r\n                    label: {\r\n                        show: false,\r\n                    },\r\n                    itemStyle: {\r\n                        areaColor: \"white\",\r\n                    },\r\n                },\r\n                textFixed: {\r\n                    Alaska: [20, -20],\r\n                },\r\n                data: dataArray,\r\n            },\r\n        ],\r\n    };\r\n};\r\n\r\nconst clearEchartOption = () => {\r\n    return {};\r\n};\r\n\r\nconst getUSALineEchartOption = (\r\n    selectedStates: string[],\r\n    theme: string,\r\n    combined: boolean\r\n) => {\r\n    let dataArray: any[] = [];\r\n    let finalArray: {\r\n        name: string;\r\n        type: string;\r\n        data: number[];\r\n        animationEasing: string;\r\n        animationDuration: number;\r\n    }[] = [];\r\n    if (combined) {\r\n        // get array of {week, cause1, cause2, ...}\r\n        usaCovidData.forEach((row) => {\r\n            const state = row[\"Jurisdiction of Occurrence\"];\r\n            if (\r\n                row[\"MMWR Year\"] === 2020 &&\r\n                selectedStates.find((el) => el === state)\r\n            ) {\r\n                const week = row[\"MMWR Week\"];\r\n                if (dataArray.findIndex((el) => el[\"week\"] === week) === -1) {\r\n                    dataArray.push({ week: week });\r\n                }\r\n                Object.keys(row).forEach((key) => {\r\n                    if (usaDiseases[key]) {\r\n                        const prettyName = usaDiseases[key];\r\n                        const idx = dataArray.findIndex(\r\n                            (el) => el[\"week\"] === week\r\n                        );\r\n                        let val = 0;\r\n                        if (row[key] && typeof row[key] === \"string\") {\r\n                            val = parseFloat(row[key].replace(/,/g, \"\"));\r\n                        } else if (row[key] && typeof row[key] === \"number\") {\r\n                            val = row[key];\r\n                        }\r\n                        if (dataArray[idx][prettyName]) {\r\n                            dataArray[idx][prettyName] += val;\r\n                        } else {\r\n                            dataArray[idx][prettyName] = val;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        });\r\n        // get population for all selected states\r\n        let population = 0;\r\n        if (selectedStates[0] === \"United States\") {\r\n            usaStates.forEach((state) => (population += state.Population));\r\n        } else {\r\n            usaStates.forEach((state) => {\r\n                if (\r\n                    selectedStates.find(\r\n                        (selectedState) => selectedState === state.State\r\n                    )\r\n                ) {\r\n                    population += state.Population;\r\n                }\r\n            });\r\n        }\r\n        dataArray.forEach((row, i) => {\r\n            // first create series entry for each disease\r\n            if (i === 1) {\r\n                Object.keys(row).forEach((key) => {\r\n                    if (key !== \"week\") {\r\n                        finalArray.push({\r\n                            name: key,\r\n                            type: \"line\",\r\n                            data: [],\r\n                            animationEasing: \"linear\",\r\n                            animationDuration: 1000,\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n            Object.keys(row).forEach((key) => {\r\n                const idx = finalArray.findIndex((el) => el[\"name\"] === key);\r\n                // only if index is found (to avoid \"week\")\r\n                if (idx !== -1) {\r\n                    finalArray[idx][\"data\"].push(\r\n                        +((row[key] * 100000) / population).toFixed(1)\r\n                    );\r\n                }\r\n            });\r\n        });\r\n    } else {\r\n        // get array of {week, state1-cause1, state1-cause2, state2-cause1,...}\r\n        usaCovidData.forEach((row) => {\r\n            const state = row[\"Jurisdiction of Occurrence\"];\r\n            if (\r\n                row[\"MMWR Year\"] === 2020 &&\r\n                selectedStates.find((el) => el === state)\r\n            ) {\r\n                const week = row[\"MMWR Week\"];\r\n                if (dataArray.findIndex((el) => el[\"week\"] === week) === -1) {\r\n                    dataArray.push({ week: week });\r\n                }\r\n                Object.keys(row).forEach((key) => {\r\n                    if (usaDiseases[key]) {\r\n                        const prettyName = state + \": \" + usaDiseases[key];\r\n                        const idx = dataArray.findIndex(\r\n                            (el) => el[\"week\"] === week\r\n                        );\r\n                        let val = 0;\r\n                        if (row[key] && typeof row[key] === \"string\") {\r\n                            val = parseFloat(row[key].replace(/,/g, \"\"));\r\n                        } else if (row[key] && typeof row[key] === \"number\") {\r\n                            val = row[key];\r\n                        }\r\n                        if (dataArray[idx][prettyName]) {\r\n                            dataArray[idx][prettyName] += val;\r\n                        } else {\r\n                            dataArray[idx][prettyName] = val;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        });\r\n        // get population for all selected states\r\n        let population = 0;\r\n        if (selectedStates[0] === \"United States\") {\r\n            usaStates.forEach((state) => (population += state.Population));\r\n        } else {\r\n            usaStates.forEach((state) => {\r\n                if (\r\n                    selectedStates.find(\r\n                        (selectedState) => selectedState === state.State\r\n                    )\r\n                ) {\r\n                    population += state.Population;\r\n                }\r\n            });\r\n        }\r\n        dataArray.forEach((row, i) => {\r\n            // first create series entry for each disease\r\n            if (i === 1) {\r\n                Object.keys(row).forEach((key) => {\r\n                    if (key !== \"week\") {\r\n                        finalArray.push({\r\n                            name: key,\r\n                            type: \"line\",\r\n                            data: [],\r\n                            animationEasing: \"linear\",\r\n                            animationDuration: 1000,\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n            Object.keys(row).forEach((key) => {\r\n                const idx = finalArray.findIndex((el) => el[\"name\"] === key);\r\n                // only if index is found (to avoid \"week\")\r\n                if (idx !== -1) {\r\n                    finalArray[idx][\"data\"].push(\r\n                        +((row[key] * 100000) / population).toFixed(1)\r\n                    );\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    const textColor = theme === \"light\" ? \"black\" : \"white\";\r\n\r\n    let options = {\r\n        tooltip: {\r\n            trigger: \"axis\",\r\n        },\r\n        legend: {\r\n            data: finalArray.map((el) => el.name),\r\n            textStyle: {\r\n                color: textColor,\r\n            },\r\n        },\r\n        grid: {\r\n            left: \"3%\",\r\n            right: \"4%\",\r\n            bottom: \"11%\",\r\n            containLabel: true,\r\n        },\r\n        toolbox: {\r\n            feature: {\r\n                saveAsImage: {},\r\n            },\r\n        },\r\n        xAxis: {\r\n            type: \"category\",\r\n            data: dataArray.map((el) => el.week),\r\n            name: \"Week in 2020\",\r\n            nameLocation: \"middle\",\r\n            nameGap: 25,\r\n            axisLine: {\r\n                lineStyle: {\r\n                    color: textColor,\r\n                },\r\n            },\r\n        },\r\n        yAxis: {\r\n            type: \"value\",\r\n            axisLine: {\r\n                lineStyle: {\r\n                    color: textColor,\r\n                },\r\n            },\r\n        },\r\n        dataZoom: [\r\n            {\r\n                type: \"slider\",\r\n            },\r\n        ],\r\n        series: finalArray,\r\n        animation: true,\r\n    };\r\n    if (combined) {\r\n        options[\"color\"] =\r\n            theme === \"light\" ? [\"black\", \"blue\"] : [\"white\", \"aqua\"];\r\n    }\r\n    return options;\r\n};\r\n\r\nconst renderTooltip = (props) => (\r\n    <Tooltip id=\"button-tooltip\" {...props}>\r\n        Click a state in the map to add to line chart below.\r\n    </Tooltip>\r\n);\r\n\r\nconst renderTooltipLineToggle = (props) => (\r\n    <Tooltip id=\"button-tooltip\" {...props}>\r\n        Toggle between comparing states or adding them together.\r\n    </Tooltip>\r\n);\r\n\r\nfunction USACovidDashboard(props) {\r\n    const [selectionStates, setSelectionStates] = useState([\"United States\"]);\r\n    const [showStates, setShowStates] = useState(false);\r\n    const [lineStatesCombined, setLineStatesCombined] = useState(true);\r\n\r\n    useEffect(() => {\r\n        echarts.registerMap(\"USA\", usa, {\r\n            Alaska: {\r\n                left: -131,\r\n                top: 25,\r\n                width: 15,\r\n                height: 7,\r\n            },\r\n            Hawaii: {\r\n                left: -110,\r\n                top: 24,\r\n                width: 5,\r\n            },\r\n            \"Puerto Rico\": {\r\n                left: -76,\r\n                top: 26,\r\n                width: 2,\r\n            },\r\n        });\r\n    }, []);\r\n\r\n    // remove selected state from list\r\n    const removeState = (state: string) => {\r\n        let states = [...selectionStates];\r\n        const idx = states.indexOf(state);\r\n        if (idx !== -1) {\r\n            states.splice(idx, 1);\r\n            if (states.length) {\r\n                setSelectionStates(states);\r\n            } else {\r\n                setSelectionStates([\"United States\"]);\r\n            }\r\n        }\r\n    };\r\n\r\n    // add selected state to list\r\n    const addState = (state: string) => {\r\n        let states = [...selectionStates];\r\n        if (states[0] === \"United States\") {\r\n            states.pop();\r\n        }\r\n        if (!states.find((el) => el === state)) {\r\n            states.push(state);\r\n        }\r\n        setSelectionStates(states);\r\n    };\r\n\r\n    const showStatesButton = () => {\r\n        setShowStates(!showStates);\r\n    };\r\n\r\n    const clearSelectionButton = () => {\r\n        setSelectionStates([\"United States\"]);\r\n    };\r\n\r\n    const combineStatesButton = () => {\r\n        setLineStatesCombined(!lineStatesCombined);\r\n    };\r\n    let states: string[] = [];\r\n    usaCovidData.forEach((row) => {\r\n        const state = row[\"Jurisdiction of Occurrence\"];\r\n        if (\r\n            states.findIndex((el) => el === state) === -1 &&\r\n            state !== \"New York City\" &&\r\n            state !== \"United States\"\r\n        ) {\r\n            states.push(state);\r\n        }\r\n    });\r\n    states.sort();\r\n    const onMapClick = (event) => {\r\n        if (event.data && event.data.name) {\r\n            addState(event.data.name);\r\n        }\r\n    };\r\n    const onMapEvents = {\r\n        click: onMapClick,\r\n    };\r\n    const btnOutline = props.theme !== \"light\" ? \"outline-\" : \"\";\r\n\r\n    // setUSALineEchartOption(\r\n    //     getUSALineEchartOption(selectionStates, props.theme, lineStatesCombined)\r\n    // );\r\n    return (\r\n        <>\r\n            <Row className=\"echart-title\">\r\n                <Col>USA Covid-Related Deaths per 100,000</Col>\r\n            </Row>\r\n            <Row className=\"echart-subtitle\">\r\n                <Col>\r\n                    <a href=\"https://data.cdc.gov/NCHS/Weekly-Counts-of-Deaths-by-State-and-Select-Causes/muzy-jte6\">\r\n                        Data from the US CDC as of 2020-11-08\r\n                    </a>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    <div className=\"\" style={{ height: \"25vh\" }}>\r\n                        <ReactEcharts\r\n                            option={getUSAMapEchartOption(props.theme)}\r\n                            lazyUpdate={true}\r\n                            className=\"covid-usa-map\"\r\n                            onEvents={onMapEvents}\r\n                        />\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    <OverlayTrigger\r\n                        placement=\"top\"\r\n                        delay={{ show: 250, hide: 400 }}\r\n                        overlay={renderTooltip}\r\n                    >\r\n                        <Button\r\n                            variant={btnOutline + \"info\"}\r\n                            style={{\r\n                                marginRight: \"10px\",\r\n                                marginBottom: \"10px\",\r\n                            }}\r\n                        >\r\n                            <i>i</i>\r\n                        </Button>\r\n                    </OverlayTrigger>\r\n                    <OverlayTrigger\r\n                        placement=\"top\"\r\n                        delay={{ show: 250, hide: 400 }}\r\n                        overlay={renderTooltipLineToggle}\r\n                    >\r\n                        <Button\r\n                            variant={btnOutline + \"warning\"}\r\n                            style={{\r\n                                marginRight: \"10px\",\r\n                                marginBottom: \"10px\",\r\n                            }}\r\n                            onClick={combineStatesButton}\r\n                        >\r\n                            {lineStatesCombined\r\n                                ? \"Compare States\"\r\n                                : \"Combine States\"}\r\n                        </Button>\r\n                    </OverlayTrigger>\r\n                    <Button\r\n                        style={{\r\n                            marginRight: \"10px\",\r\n                            marginBottom: \"10px\",\r\n                        }}\r\n                        variant={btnOutline + \"primary\"}\r\n                        onClick={showStatesButton}\r\n                    >\r\n                        {showStates ? \"Hide States\" : \"Show States\"}\r\n                    </Button>\r\n                    <Button\r\n                        style={{\r\n                            marginRight: \"10px\",\r\n                            marginBottom: \"10px\",\r\n                        }}\r\n                        variant={btnOutline + \"primary\"}\r\n                        onClick={clearSelectionButton}\r\n                    >\r\n                        Clear Selection\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n            {showStates && (\r\n                <>\r\n                    <Row>\r\n                        <Col>\r\n                            {usaStates\r\n                                .filter(\r\n                                    (element) =>\r\n                                        !selectionStates.find(\r\n                                            (slxnel) => slxnel === element.State\r\n                                        )\r\n                                )\r\n                                .map((el, i) => {\r\n                                    return (\r\n                                        <Button\r\n                                            style={{\r\n                                                marginRight: \"1px\",\r\n                                                marginBottom: \"1px\",\r\n                                            }}\r\n                                            variant={btnOutline + \"secondary\"}\r\n                                            onClick={() => addState(el.State)}\r\n                                            key={i}\r\n                                        >\r\n                                            {el.State}\r\n                                        </Button>\r\n                                    );\r\n                                })}\r\n                        </Col>\r\n                        <Col>\r\n                            {selectionStates.map((el, i) => {\r\n                                return (\r\n                                    <Button\r\n                                        style={{\r\n                                            marginRight: \"1px\",\r\n                                            marginBottom: \"1px\",\r\n                                        }}\r\n                                        variant={btnOutline + \"success\"}\r\n                                        onClick={() => removeState(el)}\r\n                                        key={i}\r\n                                    >\r\n                                        {el}\r\n                                    </Button>\r\n                                );\r\n                            })}\r\n                        </Col>\r\n                    </Row>\r\n                </>\r\n            )}\r\n            {!showStates && (\r\n                <>\r\n                    <Row>\r\n                        <Col>\r\n                            {selectionStates.map((el, i) => {\r\n                                return (\r\n                                    <Button\r\n                                        style={{\r\n                                            marginRight: \"1px\",\r\n                                            marginBottom: \"1px\",\r\n                                        }}\r\n                                        variant={btnOutline + \"success\"}\r\n                                        onClick={() => removeState(el)}\r\n                                        key={i}\r\n                                    >\r\n                                        {el}\r\n                                    </Button>\r\n                                );\r\n                            })}\r\n                        </Col>\r\n                    </Row>\r\n                </>\r\n            )}\r\n            <Row className=\"echart-title\">\r\n                <Col>Causes of Death (per 100,000)</Col>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    <div style={{ height: \"50vh\" }}>\r\n                        <ReactEcharts\r\n                            // option={USALineEchartOption}\r\n                            option={getUSALineEchartOption(\r\n                                selectionStates,\r\n                                props.theme,\r\n                                lineStatesCombined\r\n                            )}\r\n                            notMerge={true}\r\n                            // ref=\"echartsInstance\"\r\n                            lazyUpdate={true}\r\n                            className=\"covid-usa-timeline\"\r\n                        />\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default USACovidDashboard;\r\n","import React, { useState } from \"react\";\r\nimport { Container, Row, Button } from \"react-bootstrap\";\r\nimport \"./BiSamples.css\";\r\nimport USACovidDashboard from \"./USACovidDashboard/USACovidDashboard\";\r\n// import WorldCovidDashboard from \"./WorldCovidDashboard/WorldCovidDashboard\";\r\n\r\nfunction BiSamples(props) {\r\n    const [selectedDash, setSelectedDash] = useState(\"USA Covid\");\r\n    const dashboards = [\"USA Covid\", \"Business\"];\r\n    return (\r\n        <Container className=\"bi-container\">\r\n            <Row\r\n                style={{\r\n                    marginBottom: \"10px\",\r\n                }}\r\n            >\r\n                <div className=\"btn dashboard-btn-label\">Dashboards:</div>\r\n                {dashboards.map((el, i) => {\r\n                    return (\r\n                        <Button\r\n                            style={{\r\n                                marginRight: \"5px\",\r\n                            }}\r\n                            variant={\r\n                                props.theme !== \"light\"\r\n                                    ? \"outline-info\"\r\n                                    : \"info\"\r\n                            }\r\n                            key={i}\r\n                            onClick={() => setSelectedDash(el)}\r\n                        >\r\n                            <i>{el}</i>\r\n                        </Button>\r\n                    );\r\n                })}\r\n            </Row>\r\n            {selectedDash === \"Business\" && <div>Under construction</div>}\r\n            {selectedDash === \"USA Covid\" && (\r\n                <USACovidDashboard theme={props.theme}></USACovidDashboard>\r\n            )}\r\n            {/* {selectedDash === \"World Covid\" && (\r\n                <WorldCovidDashboard theme={props.theme}></WorldCovidDashboard>\r\n            )} */}\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default BiSamples;\r\n"],"sourceRoot":""}